"""OpenVPN config generator."""

from ipaddress import ip_network
from logging import getLogger
from os import linesep
from pathlib import Path
from subprocess import CalledProcessError
from typing import Iterable

from hwdb.config import CONFIG, OPENVPN_NETWORK
from hwdb.exceptions import NoConnection
from hwdb.orm.openvpn import OpenVPN
from hwdb.orm.system import System
from hwdb.system import root, systemctl


__all__ = ['openvpncfgen']


LOGGER = getLogger('openvpn')
CLIENTS_DIR = Path(CONFIG['OpenVPN']['clients_dir'])
OPENVPN_SERVICE = 'openvpn-server@terminals.service'
ROUTE = 'push "route {network.network_address} {network.netmask} {nexthop}"'
ROUTES = [ip_network(route) for route in CONFIG['OpenVPN']['routes'].split()]
TEMPLATE = '''# Generated by openvpncfg-gen.
# DO NOT EDIT THIS FILE MANUALLY!
# System ID: {id}
# OpenVPN ID: {vpn}
# Legacy key: {key}

ifconfig-push {ipaddress} {network.netmask}
push "route {network.network_address} {network.netmask}"
'''


def get_config(system: System, openvpn: OpenVPN) -> str:
    """Returns the OpenVPN configuration for the respective system."""

    ipaddress = openvpn.ipv4address
    config = TEMPLATE.format(
        id=system.id, vpn=openvpn.id, key=openvpn.key, ipaddress=ipaddress,
        network=OPENVPN_NETWORK)

    for network in ROUTES:
        config += ROUTE.format(network=network, nexthop=ipaddress) + linesep

    return config


def write_config_file(system: System):
    """Returns the OpenVPN configuration for the respective system."""

    openvpn = system.openvpn

    if openvpn is None:
        raise NoConnection()

    with CLIENTS_DIR.joinpath(openvpn.filename).open('w') as cfg:
        cfg.write(get_config(system, openvpn))


def write_config_files(systems: Iterable[System]):
    """Generates the respective configuration files."""

    for system in systems:
        try:
            write_config_file(system)
        except NoConnection:
            LOGGER.error('System %i has no VPN configuration.', system.id)


def remove_config_files():
    """Removes all existing client config files."""

    for file in CLIENTS_DIR.glob('*'):
        if file.is_file():
            file.unlink()


@root(LOGGER)
def openvpncfgen() -> bool:
    """Runs the OpenVPN config generator."""

    LOGGER.info('Generating configuration.')
    remove_config_files()
    write_config_files(System.select(cascade=True).where(True))

    try:
        systemctl('restart', OPENVPN_SERVICE)
    except CalledProcessError:
        return False

    return True
