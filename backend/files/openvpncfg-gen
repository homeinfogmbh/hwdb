#! /usr/bin/env python3
"""openvpncfg-gen.

    Generates OpenVPN client IP configuration from HOMEINFO terminal records.

Usage:
    openvpncfg-gen [options]

Options:
    --no-restart    No not restart OpenVPN after generating the configurations.
    --help          Show this page.
"""
from pathlib import Path
from subprocess import CalledProcessError, check_call
from sys import exit    # pylint: disable=W0622
from traceback import format_exc

from docopt import docopt
from fancylog import TTYAnimator
from syslib import script

from terminallib.config import CONFIG, LOGGER
from terminallib import System


SYSTEMCTL = '/bin/systemctl'
RESTART_CMD = (SYSTEMCTL, 'restart', 'openvpn-server@terminals.service')
TEMPLATE = '''
# Generated by openvpncfg-gen.
# DO NOT EDIT THIS FILE MANUALLY!
# System #{}.

ifconfig-push {} {}
'''     # Mandatory empty line at end of file


def generate_config():
    """Generates the respective configuration files."""

    for system in System:
        openvpn = system.openvpn

        if openvpn is None:
            LOGGER.error('Terminal %i has no VPN configuration.', system.id)
            continue

        config_text = TEMPLATE.format(
            system.id, openvpn.ipv4address, CONFIG['OpenVPN']['netmask'])
        file_name = openvpn.key or str(openvpn.id)
        clients_dir = Path(CONFIG['OpenVPN']['clients_dir'])
        file_path = clients_dir.joinpath(file_name)

        with file_path.open('w') as cfg:
            cfg.write(config_text)


@script
def main(options):
    """Runs the OpenVPN config generator."""

    reload = not options['--no-restart']
    error = None

    with TTYAnimator('Generating configuration') as animation:
        try:
            generate_config()
        except Exception:
            error = format_exc()
            animation.result = False
        else:
            animation.result = True

    if error is not None:
        LOGGER.error(error)
        exit(2)

    if reload:
        with TTYAnimator('Restarting OpenVPN') as animation:
            try:
                check_call(RESTART_CMD)
            except CalledProcessError:
                animation.result = False
                exit(1)

            animation.result = True

    exit(0)


if __name__ == '__main__':
    main(docopt(__doc__))
