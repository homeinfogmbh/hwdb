#! /usr/bin/env python3
"""chksync.

    Checks synchronization status for the respective terminal.

Usage:
    chksync <tid> <cid> [options]

Options:
    --warning=<hours>       Warning period in hours [default: 24]
    --critical=<hours>      Critical period in hours [default: 72]
"""
from datetime import datetime, timedelta
from sys import stderr, exit as exit_

from docopt import docopt

from syslib import script
from terminallib import Terminal, Synchronization


def parse_options(options):
    """Parses the provided options."""

    try:
        tid = int(options['<tid>'])
    except ValueError:
        print('Invalid terminal ID: {}.'.format(tid), file=stderr)
        exit_(4)

    try:
        cid = int(options['<cid>'])
    except ValueError:
        print('Invalid customer ID: {}.'.format(cid), file=stderr)
        exit_(5)

    try:
        warning = int(options['--warning'])
    except ValueError:
        print('Invalid amout of hours for warning: {}.'.format(warning),
              file=stderr)
        exit_(6)
    else:
        warning = timedelta(hours=warning)

    try:
        critical = int(options['--critical'])
    except ValueError:
        print('Invalid amout of hours for critical: {}.'.format(critical),
              file=stderr)
        exit_(7)
    else:
        critical = timedelta(hours=critical)

    try:
        terminal = Terminal.get(
            (Terminal.customer == cid) &
            (Terminal.tid == tid))
    except Terminal.DoesNotExist:
        print('No such terminal.', file=stderr)
        exit_(8)

    return (terminal, warning, critical)


@script
def main(options):
    """Runs the sync check."""

    terminal, warning, critical = parse_options(options)
    latest = None

    for synchronization in Synchronization.select().where(
            (Synchronization.terminal == terminal) &
            ~ (Synchronization.finished >> None) &
            (Synchronization.result == 1)).order_by(
                Synchronization.finished.desc()).limit(1):
        latest = synchronization.finished

    if latest is None:
        print('Never.')
        return 2  # critical

    print(latest)
    now = datetime.now()

    if now - latest > critical:
        return 2  # critical
    elif now - latest > warning:
        return 1  # warning

    return 0  # ok


if __name__ == '__main__':
    exit_(main(docopt(__doc__)))
