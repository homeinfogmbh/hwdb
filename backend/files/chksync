#! /usr/bin/env python3
"""chksync.

    Checks synchronization status for the respective terminal.

Usage:
    chksync <id> [options]

Options:
    --warning=<hours>       Warning period in hours [default: 24]
    --critical=<hours>      Critical period in hours [default: 72]
"""
from datetime import datetime, timedelta
from sys import stderr, exit    # pylint: disable=W0622

from docopt import docopt

from syslib import script
from terminallib import System, Synchronization


def parse_options(options):
    """Parses the provided options."""

    try:
        system = System[options['<id>']]
    except ValueError:
        print('Invalid system ID.')
        exit(4)

    try:
        warning = int(options['--warning'])
    except ValueError:
        print('Invalid amout of hours for warning: {}.'.format(warning),
              file=stderr)
        exit(6)
    else:
        warning = timedelta(hours=warning)

    try:
        critical = int(options['--critical'])
    except ValueError:
        print('Invalid amout of hours for critical: {}.'.format(critical),
              file=stderr)
        exit(7)
    else:
        critical = timedelta(hours=critical)

    return (system, warning, critical)


@script
def main(options):
    """Runs the sync check."""

    system, warning, critical = parse_options(options)
    latest = None

    for synchronization in Synchronization.select().where(
            (Synchronization.system == system) &
            ~ (Synchronization.finished >> None) &
            (Synchronization.result == 1)).order_by(
                Synchronization.finished.desc()).limit(1):
        latest = synchronization.finished

    if latest is None:
        print('Never.')
        exit(2)     # critical

    print(latest)
    now = datetime.now()

    if now - latest > critical:
        exit(2)     # critical
    elif now - latest > warning:
        exit(1)     # warning

    exit(0)     # ok


if __name__ == '__main__':
    main(docopt(__doc__))
