#! /usr/bin/env python3
"""Generates bind9 configuration for HOMEINFO's VPN networks."""

from logging import basicConfig, getLogger
from subprocess import CalledProcessError, check_call
from sys import exit    # pylint: disable=W0622

from fancylog import TTYAnimator
from syslib import script
from terminallib import System


__all__ = [
    'DNS_TEMPLATE',
    'DNS_CONFIG',
    'RECORD',
    'LOCAL_HOSTS_LIST',
    'management_hosts',
    'terminal_hosts']

SYSTEMCTL = '/bin/systemctl'
DNS_TEMPLATE = '/usr/local/etc/homeinfo.intranet.zone.temp'
LOCAL_HOSTS_LIST = '/usr/local/etc/local_hosts'
DNS_CONFIG = '/etc/bind/homeinfo.intranet.zone'
RECORD = '{}\tIN\tA\t{}'
LOG_FORMAT = '[%(levelname)s] %(name)s: %(message)s'
LOGGER = getLogger('bindcfg-gen')


def management_hosts():
    """Renders management network hosts."""

    yield ';# Management network hosts\n'

    with open(LOCAL_HOSTS_LIST, 'r') as local_hosts_list:
        for record in local_hosts_list:
            record = record.strip()

            if record and not record.startswith('#'):
                yield RECORD.format(*record.split())


def terminal_hosts():
    """Renders terminal network hosts."""

    yield ';# Terminal network hosts\n'

    for system in System:
        try:
            ipv4address = system.openvpn.ipv4address
        except AttributeError:
            LOGGER.warning('No OpenVPN config for #%i.', system.id)
        else:
            yield RECORD.format(system.vpn_hostname, ipv4address)

        try:
            ipv4address = system.wireguard.ipv4address
        except AttributeError:
            LOGGER.warning('No WireGuard config for #%i.', system.id)
        else:
            yield RECORD.format(system.wg_hostname, ipv4address)


@script
def main():
    """Runs generates the confi files."""

    basicConfig(format=LOG_FORMAT)

    with open(DNS_TEMPLATE, 'r') as temp:
        template = temp.read()

    config = template.format(
        file=__file__,
        management='\n'.join(management_hosts()),
        terminals='\n'.join(terminal_hosts()))

    with open(DNS_CONFIG, 'w') as dns_cfg:
        dns_cfg.write(config)

    with TTYAnimator('Restarting bind9 service') as anim:
        try:
            check_call([SYSTEMCTL, 'restart', 'bind9.service'])
        except CalledProcessError:
            anim.result = False
            return 1
        else:
            anim.result = True
            return 0


if __name__ == '__main__':
    exit(main())
