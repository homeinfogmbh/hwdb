#! /usr/bin/env python3
"""Terminal database query utility."""

from argparse import ArgumentParser
from logging import DEBUG, INFO, basicConfig, getLogger
from pathlib import Path
from sys import exit, stderr    # pylint: disable=W0622

from syslib import script

from terminallib.cli import ARNIE
from terminallib.cli import DEFAULT_FIELDS
from terminallib.cli import print_system
from terminallib.cli import get_system
from terminallib.cli import list_systems
from terminallib.enumerations import Connection, OperatingSystem, Type
from terminallib.exceptions import TerminalError, AmbiguousSystems
from terminallib.filter import get_systems


LOG_FORMAT = '[%(levelname)s] %(name)s: %(message)s'
LOGGER = getLogger(Path(__file__).name)


def get_args():
    """Returns the CLI options."""

    parser = ArgumentParser(description='Terminal database query utility.')
    parser.add_argument(
        '-v', '--verbose', action='store_true', help='turn on verbose logging')
    subparsers = parser.add_subparsers(dest='mode')

    list_systems = subparsers.add_parser('ls', help='list systems')
    list_systems.add_argument(
        'id', nargs='*', type=int, metavar='id',
        help='filter for systems of the respective customer')
    list_systems.add_argument(
        '-c', '--customer', type=int, metavar='customer',
        help='filter for systems of the respective customer')
    list_systems.add_argument(
        '-d', '--deployed', type=int, metavar='deployed',
        help='filter for deployed or undeployed systems')
    list_systems.add_argument(
        '--testing', type=int, metavar='testing',
        help='filter for testing systems')
    list_systems.add_argument(
        '-t', '--type', nargs='+', type=Type, metavar='type',
        help='filter for the respective types')
    list_systems.add_argument(
        '-i', '--connection', nargs='+', type=Connection,
        metavar='connection',
        help='filter for the respective connections')
    list_systems.add_argument(
        '-o', '--os', nargs='+', type=OperatingSystem, metavar='os',
        help='filter for the respective operating systems')
    list_systems.add_argument(
        '-f', '--field', nargs='+', metavar='field',
        help='specifies the fields to print')
    list_systems.add_argument(
        '-s', '--separator', default='  ', metavar='separator',
        help='specifies the fields separator')
    list_systems.add_argument(
        '-n', '--no-header', action='store_true',
        help='do not print table header')

    find_systems = subparsers.add_parser(
        'find', help='find digital signage systems')
    find_systems.add_argument(
        'street', help='filter for systems of the respective street')
    find_systems.add_argument(
        'house_number', nargs='?',
        help='filter for systems of the respective house number')
    find_systems.add_argument(
        'annotation', nargs='?',
        help='filter for systems of the respective annotation')

    subparsers.add_parser('CSM-101', help='?')
    return parser.parse_args()


def _list_systems(args):
    """Lists systems."""

    if args.field:
        fields = [field.lower() for field in args.field]
    else:
        fields = DEFAULT_FIELDS

    systems = get_systems(
        args.id, customer=args.customer, deployed=args.deployed,
        testing=args.testing, oss=args.os, types=args.type)

    for line in list_systems(
            systems, header=not args.no_header, fields=fields,
            sep=args.separator):
        try:
            print(line, flush=True)
        except BrokenPipeError:
            stderr.close()
            break

    return 0


def _find_system(args):
    """Finds a system."""

    try:
        system = get_system(
            args.street, house_number=args.house_number,
            annotation=args.annotation)
    except AmbiguousSystems as ambiguous:
        LOGGER.error('Ambiguous systems.')

        for system in ambiguous:
            print_system(system)

        return 1
    except TerminalError as error:
        LOGGER.error(error)
        return 2

    print_system(system)
    return 0


@script
def main():
    """Runs the system utility."""

    args = get_args()
    basicConfig(level=DEBUG if args.verbose else INFO, format=LOG_FORMAT)
    retval = 0

    if args.mode == 'ls':
        retval = _list_systems(args)
    elif args.mode == 'find':
        retval = _find_system(args)
    elif args.mode == 'CSM-101':
        print(ARNIE)

    exit(retval)


if __name__ == '__main__':
    main()
