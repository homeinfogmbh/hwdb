#! /usr/bin/env python3
"""Terminal database query utility."""

from argparse import ArgumentParser
from logging import INFO, basicConfig, getLogger
from pathlib import Path
from sys import exit    # pylint: disable=W0622

from syslib import script

from terminallib.cli import ARNIE
from terminallib.cli import DEFAULT_FIELDS
from terminallib.cli import FIELDS
from terminallib.cli import print_system
from terminallib.cli import get_system
from terminallib.cli import list_systems
from terminallib.cli import list_types
from terminallib.cli import list_oss
from terminallib.enumerations import Connection, OperatingSystem, Type
from terminallib.exceptions import TerminalError, AmbiguousSystems
from terminallib.filter import get_systems


LOG_FORMAT = '[%(levelname)s] %(name)s: %(message)s'
LOGGER = getLogger(Path(__file__).name)


def get_args():
    """Returns the CLI options."""

    parser = ArgumentParser(description='Terminal database query utility.')
    subparsers = parser.add_subparsers()
    list_systems = subparsers.add_parser('ls', help='list systems')
    list_systems.add_argument(
        'id', nargs='*', type=int, metavar='id',
        help='filter for systems of the respective customer')
    list_systems.add_argument(
        '-c', '--customer', type=int, metavar='customer',
        help='filter for systems of the respective customer')
    list_systems.add_argument(
        '-d', '--deployed', type=bool, metavar='deployed',
        help='filter for deployed or undeployed systems')
    list_systems.add_argument(
        '-p', '--productive', type=bool, metavar='productive',
        help='filter for productive systems')
    list_systems.add_argument(
        '-t', '--type', nargs='*', type=Type, metavar='type',
        help='filter for the respective types')
    list_systems.add_argument(
        '-i', '--connection', nargs='*', type=Connection,
        metavar='connection',
        help='filter for the respective connections')
    list_systems.add_argument(
        '-o', '--os', nargs='*', type=OperatingSystem, metavar='os',
        help='filter for the respective operating systems')
    list_systems.add_argument(
        '-f', '--field', nargs='*', help='specifies the fields to print')
    list_systems.add_argument(
        '-n', '--no-header', action='store_true',
        help='do not print table header')
    list_systems.add_argument(
        '-v', '--verbose', action='store_true', help='turn on verbose logging')
    find_systems = subparsers.add_parser(
        'find', help='find digital signage systems')
    return parser.parse_args()


def _list_systems(args):
    """Lists systems."""

    ids = [int(id) for id in options['<ids>']]
    customer = options['--customer']

    if customer is not None:
        try:
            customer = int(customer)
        except ValueError:
            LOGGER.error('Invalid customer ID: %s.', customer)
            return 1

    deployed = _get_deployed(options)
    testing = _get_testing(options)
    oss = options['--oss'].split(',') if options['--oss'] else ()
    online = options['--online']
    offline = options['--offline']
    header = not options['--omit-header']
    separator = options['--separator'] or '  '
    fields = options['--fields']
    types = set(_get_types(options))

    if fields:
        fields = [field.lower() for field in fields.split(',') if field]
    else:
        fields = DEFAULT_FIELDS

    systems = get_systems(
        ids, customer=customer, deployed=deployed, testing=testing, oss=oss,
        types=types, online=online, offline=offline)

    for line in list_systems(
            systems, header=header, fields=fields, sep=separator):
        print(line, flush=True)

    return 0


def _list_oss(_):
    """Lists available operating systems."""


def _find_system(args):
    """Finds a system."""

    try:
        system = get_system(
            options['<street>'], options['<house_number>'],
            options['--annotation'])
    except AmbiguousSystems as ambiguous:
        LOGGER.error(ambiguous)

        for system in ambiguous.systems:
            print_system(system)

        return 1
    except TerminalError as error:
        LOGGER.error(error)
        return 2

    print_system(system)
    return 0


@script
def main():
    """Runs the system utility."""

    basicConfig(level=INFO, format=LOG_FORMAT)
    args = get_args()
    print(args)
    print(dir(args))
    exit(0)


if __name__ == '__main__':
    main()
