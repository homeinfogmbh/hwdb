#! /usr/bin/env python3
"""termutil.

    Terminal database query utility.

Usage:
    termutil (list | ls) [<expression>...] [options]
    termutil find <street> [<house_number>] [options]
    termutil list-fields

Options:
    --list-systems, -S          List systems.
    --list-types, -T            List types.
    --list-oss, -O              List operating systems.
    --deployed, -d              Filter for deployed systems.
    --undeployed, -u            Filter for undeployed systems.
    --testing                   Filter for testing systems.
    --productive, -p            Filter for productive systems.
    --types=<types>, -t         Filter for systems of the specified
                                classes (comma separated).
    --oss=<oss>, -o             Filter for systems using the specified
                                operating systems (comma separated).
    --online                    Filter for systems that are online.
    --offline                   Filter for systems that are offline.
    --omit-header, -n           Do not print the column header.
    --separator=<sep>, -s       Specifies the column separator.
    --fields=<fields>, -f       Comma-separated list of fields to display.
    --annotation=<text>, -a     Consider the specified annotation.
"""
from logging import INFO, basicConfig, getLogger
from pathlib import Path
from sys import exit    # pylint: disable=W0622

from docopt import docopt

from syslib import script

from terminallib.cli import ARNIE
from terminallib.cli import DEFAULT_FIELDS
from terminallib.cli import FIELDS
from terminallib.cli import print_system
from terminallib.cli import get_system
from terminallib.cli import list_systems
from terminallib.cli import list_types
from terminallib.cli import list_oss
from terminallib.exceptions import TerminalError, AmbiguousSystems
from terminallib.filter import get_systems


LOG_FORMAT = '[%(levelname)s] %(name)s: %(message)s'
LOGGER = getLogger(Path(__file__).name)


def _list_systems(options):
    """Lists systems."""

    ids = [int(id) for id in options['<ids>']]
    customer = options['--customer']

    try:
        customer = int(customer)
    except ValueError:
        LOGGER.error('Invalid customer ID: %s.', customer)

    if options['--deployed'] and options['--undeployed']:
        deployed = None
    elif options['--deployed']:
        deployed = True
    elif options['--undeployed']:
        deployed = False
    else:
        deployed = None

    if options['--testing'] and options['--productive']:
        testing = None
    elif options['--testing']:
        testing = True
    elif options['--productive']:
        testing = False
    else:
        testing = None

    oss = options['--oss'].split(',') if options['--oss'] else ()
    online = options['--online']
    offline = options['--offline']
    header = not options['--omit-header']
    separator = options['--separator'] or '  '
    fields = options['--fields']

    if fields:
        fields = [field.lower() for field in fields.split(',') if field]
    else:
        fields = DEFAULT_FIELDS

    systems = get_systems(
        ids, customer, deployed=deployed, testing=testing, oss=oss,
        online=online, offline=offline)

    for line in list_systems(
            systems, header=header, fields=fields, sep=separator):
        print(line, flush=True)

    return 0


def _list_oss(_):
    """Lists available operating systems."""


def _find_system(options):
    """Finds a system."""

    try:
        system = get_system(
            options['<street>'], options['<house_number>'],
            options['--annotation'])
    except AmbiguousSystems as ambiguous:
        LOGGER.error(ambiguous)

        for system in ambiguous.systems:
            print_system(system)

        return 1
    except TerminalError as error:
        LOGGER.error(error)
        return 2

    print_system(system)
    return 0


@script
def main(options):
    """Runs the system utility."""

    basicConfig(level=INFO, format=LOG_FORMAT)

    if options['list'] or options['ls']:
        if sum((options['--list-systems'], options['--list-types'],
                options['--list-oss'])) != 1:
            if '-'.join(options['<expression>']) == 'CSM-101':
                print(ARNIE)
            else:
                LOGGER.error(
                    'Must specify exactly one list option '
                    'or a Cyberdyne Systems Model.')
                return 1
        elif options['--list-systems']:
            return _list_systems(options)
        elif options['--list-types']:
            for typ in list_types():
                print(typ, flush=True)
        elif options['--list-oss']:
            for operating_system in list_oss():
                print(operating_system, flush=True)
    elif options['find']:
        return _find_system(options)
    elif options['list-fields']:
        print('Default fields:  ', ', '.join(DEFAULT_FIELDS))
        print('Available fields:', ', '.join(sorted(FIELDS)))

    return 0


if __name__ == '__main__':
    exit(main(docopt(__doc__)))
