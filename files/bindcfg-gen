#! /usr/bin/env python3
#
#  This file is part of the python3 package "homeinfo.terminals"
#
#  (C) 2016: HOMEINFO - Digitale Informationssysteme GmbH
#
#  Maintainer: Richard Neumann <r dot neumann at homeinfo period de>
#
#####################################################################
"""Generates bind9 configuration for HOMEINFO's VPN networks"""

from os.path import basename
from logging import INFO, getLogger, basicConfig

from homeinfo.lib.system import run, evaluate
from homeinfo.terminals.orm import VPNUnconfiguredError, Terminal


__all__ = [
    'DNS_TEMPLATE',
    'DNS_CONFIG',
    'RECORD',
    'LOCAL_HOSTS_LIST',
    'management_hosts',
    'terminal_hosts']

DNS_TEMPLATE = '/usr/local/etc/homeinfo.intranet.zone.temp'
LOCAL_HOSTS_LIST = '/usr/local/etc/local_hosts'
DNS_CONFIG = '/etc/bind/homeinfo.intranet.zone'
RECORD = '{0}\tIN\tA\t{1}\n'

logger = getLogger(basename(__file__))


def management_hosts():
    """Renders management network hosts"""

    management = ';# Management network hosts\n'

    with open(LOCAL_HOSTS_LIST, 'r') as lhl:
        for record in lhl:
            if record.strip() and not record.startswith('#'):
                hostname, ipv4addr = record.split()
                management += RECORD.format(hostname, ipv4addr)

    return management


def terminal_hosts():
    """Renders terminal network hosts"""

    terminals = ';# Terminal network hosts\n'
    for terminal in Terminal:
        hostname = '{0}.{1}'.format(terminal.tid, terminal.cid)
        try:
            ipv4addr = terminal.ipv4addr
        except VPNUnconfiguredError:
            logger.error('Terminal {0} has no VPN configuration'.format(
                terminal))
        else:
            terminals += RECORD.format(hostname, ipv4addr)
    return terminals


if __name__ == '__main__':
    basicConfig(level=INFO)

    with open(DNS_TEMPLATE, 'r') as temp:
        template = temp.read()

    config = template.format(
        file=__file__,
        management=management_hosts(),
        terminals=terminal_hosts())

    with open(DNS_CONFIG, 'w') as dns_cfg:
        dns_cfg.write(config)

    print('Restarting bind9 service', end='              ')
    evaluate(run('systemctl restart bind9.service', shell=True))
