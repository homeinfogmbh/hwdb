#! /usr/bin/env python3
#
#  This file is part of the python3 package "homeinfo.terminals"
#
#  (C) 2016: HOMEINFO - Digitale Informationssysteme GmbH
#
#  Maintainer: Richard Neumann <r dot neumann at homeinfo period de>
#
#####################################################################
"""Checks synchronization status for the respective terminal

Usage:
    chksync <tid> <cid> [options]

Options:
    --warning=<hours>       Warning period in hours [default: 24]
    --critical=<hours>      Critical period in hours [default: 72]
"""

from datetime import datetime, timedelta

from peewee import DoesNotExist

from homeinfo.terminals.orm import Terminal, Synchronization


if __name__ == '__main__':
    from docopt import docopt

    options = docopt(__doc__)
    tid = options['<tid>']
    cid = options['<cid>']
    warning = options['--warning']
    critical = options['--critical']

    try:
        tid = int(tid)
    except ValueError:
        print('Invalid terminal ID: {}'.format(tid))
        exit(4)

    try:
        cid = int(cid)
    except ValueError:
        print('Invalid customer ID: {}'.format(cid))
        exit(5)

    try:
        warning = int(warning)
    except ValueError:
        print('Invalid amout of hours for warning: {}'.format(warning))
        exit(6)
    else:
        warning_delta = timedelta(hours=warning)

    try:
        critical = int(critical)
    except ValueError:
        print('Invalid amout of hours for critical: {}'.format(critical))
        exit(7)
    else:
        critical_delta = timedelta(hours=critical)

    try:
        terminal = Terminal.get(
            (Terminal.customer == cid) &
            (Terminal.tid == tid))
    except DoesNotExist:
        print('No such terminal: {}.{}'.format(tid, cid))
        exit(8)

    latest = None

    for sync in Synchronization.select().where(
            (Synchronization.terminal == terminal) & ~
            (Synchronization.finished >> None) &
            (Synchronization.result == 1)):
        if latest is None:
            latest = sync.finished
        else:
            if latest < sync.finished:
                latest = sync.finished

    if latest is None:
        print('Never')
        exit(2)  # critical
    else:
        print(latest)
        now = datetime.now()

        if now - latest > critical_delta:
            exit(2)  # critical
        elif now - latest > warning_delta:
            exit(1)  # warning
        else:
            exit(0)  # ok
