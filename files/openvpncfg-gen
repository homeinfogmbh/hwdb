#! /usr/bin/env python3
"""openvpncfg-gen.

    Generates OpenVPN client IP configuration from HOMEINFO terminal records.

Usage:
    openvpncfg-gen [options]

Options:
    --no-restart    No not restart OpenVPN after generating the configurations.
    --help          Show this page.
"""
from pathlib import Path
from subprocess import CalledProcessError, check_call
from sys import stderr, exit as exit_
from traceback import format_exc

from fancylog import TTYAnimation
from terminallib import CONFIG, VPNUnconfiguredError, Terminal


SYSTEMCTL = '/bin/systemctl'
RESTART_CMD = (SYSTEMCTL, 'restart', 'openvpn-server@terminals.service')
TEMPLATE = '''
# Generated by openvpncfg-gen.
# DO NOT EDIT THIS FILE MANUALLY!
# Terminal no. {} for customer {} ({}).

ifconfig-push {} {}
'''     # Mandatory empty line at end of file


def generate_config():
    """Generates the respective configuration files."""

    for terminal in Terminal.select().where(Terminal.deleted >> None):
        try:
            config_text = TEMPLATE.format(
                terminal.tid, str(terminal.customer), terminal.customer.id,
                terminal.ipv4addr, CONFIG['net']['IPV4MASK'])
        except VPNUnconfiguredError:
            print('Terminal {} has no VPN configuration.'.format(terminal),
                  file=stderr)
        else:
            file_name = terminal.vpn.key or str(terminal)
            clients_dir = Path(CONFIG['openvpn']['CLIENTS_DIR'])
            file_path = clients_dir.joinpath(file_name)

            with file_path.open('w') as cfg:
                cfg.write(config_text)


def main(options):
    """Runs the OpenVPN config generator."""

    reload = not options['--no-restart']
    error = None

    with TTYAnimation('Generating configuration') as animation:
        try:
            generate_config()
        except Exception:
            error = format_exc()
            animation.result = False
        else:
            animation.result = True

    if error is not None:
        print(error, file=stderr)
        return 2

    if reload:
        with TTYAnimation('Restarting OpenVPN') as animation:
            try:
                check_call(RESTART_CMD)
            except CalledProcessError:
                animation.result = False
                return 1
            else:
                animation.result = True
                return 0


if __name__ == '__main__':
    from docopt import docopt
    exit_(main(docopt(__doc__)))
