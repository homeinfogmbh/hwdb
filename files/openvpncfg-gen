#! /usr/bin/env python3
#
#  This file is part of the python3 package "homeinfo.terminals"
#
#  (C) 2016: HOMEINFO - Digitale Informationssysteme GmbH
#
#  Maintainer: Richard Neumann <r dot neumann at homeinfo period de>
#
#####################################################################
"""openvpncfg-gen

Generate OpenVPN client IP configuration from HOMEINFO terminal records

Usage:
    openvpncfg-gen [options]

Options:
    --no-restart    No not restart OpenVPN after generating the configurations.
    --help          Show this page.
"""

from os.path import join, basename

from doctopt import docopt
from fancylog import Logger
from homeinfo.terminals.orm import VPNUnconfiguredError, Terminal
from homeinfo.terminals.config import config
from syslib import run, evaluate


RESTART_CMD = 'systemctl restart openvpn-server@terminals.service'


def configuration_lines(terminal, script_name='openvpncfg-gen'):
    """Yields lines for the configuration file of the respective terminal"""

    yield '# Generated by {}'.format(script_name)
    yield '# DO NOT EDIT THIS FILE MANUALLY!'
    yield ''
    yield '# Terminal no. {} for customer {} ({})'.format(
        terminal.tid, str(terminal.customer), terminal.customer.id)
    yield 'ifconfig-push {} {}'.format(
        terminal.ipv4addr, config['net']['IPV4MASK'])


def configuration(terminal, script_name='openvpncfg-gen'):
    """Returns the configuration file text for the respective terminal"""

    return '\n'.join(configuration_lines(terminal, script_name=script_name))


if __name__ == '__main__':
    logger = Logger(basename(__file__))
    options = docopt(__doc__)
    reload = not options['--no-restart']

    for terminal in Terminal.select().where(Terminal.deleted >> None):
        try:
            config_text = configuration(terminal, script_name=__file__)
        except VPNUnconfiguredError:
            logger.error('Terminal {} has no VPN configuration.'.format(
                terminal))
        else:
            file_name = terminal.vpn.key or str(terminal)
            file_path = join(config['openvpn']['CLIENTS_DIR'], file_name)

            with open(file_path, 'w') as cfg:
                cfg.write(config_text)

    if reload:
        print('Restarting OpenVPN'.ljust(40), end='')
        evaluate(run(RESTART_CMD, shell=True))
