#! /usr/bin/env python3
"""Generate Nagios3 client configurations
from HOMEINFO terminal records
"""

from os.path import join
from homeinfo.terminals.db import Terminal, Class
from homeinfo.terminals.config import monitoring

__author__ = 'Richard Neumann <r.neumann@homeinfo.de>'
__date__ = '22.04.2015'


def mkhosts():

    def render(template, host_name, alias, address, groups):
        """Renders the template with the respective data"""
        rendered = template.replace('%HOST_NAME%', host_name)
        rendered = rendered.replace('%ALIAS%', alias)
        rendered = rendered.replace('%ADDRESS%', address)
        return rendered

    conf_path = join(monitoring['CONF_DIR'], monitoring['HOSTS_FILE_NAME'])

    with open(monitoring['HOST_TEMPLATE']) as temp:
        template = temp.read()

    data = '\n'.join([' '.join(['# Generated by', __file__]),
                      '# DO NOT EDIT THIS FILE MANUALLY!\n\n',])

    for terminal in Terminal.select().where(Terminal.deleted == 0):
        host_name = terminal.hostname
        alias = repr(terminal.location)
        address = str(terminal.ipv4addr)
        groups = [terminal.class_.name]
        data += '\n# ' + host_name
        data += '\n'
        data += render(template, host_name, alias, address, groups)
        data += '\n'

    with open(conf_path, 'w') as cfg:
        cfg.write(data)


def mkgroups():

    def render(template, name, full_name, memebers):
        """Renders host groups"""
        rendered = group_template.replace('%NAME%', name)
        rendered = rendered.replace('%FULL_NAME%', name)
        rendered = rendered.replace('%MEMBERS%', name)
        return rendered

    conf_path = join(monitoring['CONF_DIR'], monitoring['GROUPS_FILE_NAME'])

    with open(monitoring['GROUP_TEMPLATE']) as temp:
        template = temp.read()

    data = '\n'.join([' '.join(['# Generated by', __file__]),
                      '# DO NOT EDIT THIS FILE MANUALLY!\n\n',])

    for class_ in Class.select().where(True):
        members = []
        for terminal in class_.terminals:
            if not terminal.deleted:
                member = str(terminal.ipv4addr)
                members.append(member)

        name = class_.name
        full_name = class_.full_name
        data += '\n# ' + full_name
        data += '\n'
        data += render(template, name, full_name, members)
        data += '\n'

    with open(conf_path, 'w') as cfg:
        cfg.write(data)

mkhosts()
mkgroups()
