#! /usr/bin/env python3
#
#  Multi purpose terminal maintenance utility
#
#  Maintainer: Richard Neumann <r.neumann@homeinfo.de>
#
######################################################
"""Multi purpose terminal maintenance utility

Maintainer: Richard Neumann <r.neumann@homeinfo.de>

Usage:
    termutil (list | ls) [<cid> [(--deployed | --undeployed)] \
[(--testing | --productive)] [--expr]]
    termutil (chkres) [<expr>]
"""

from sys import stderr

from docopt import docopt

from homeinfo.lib.strf import Terminal as TerminalColor
from homeinfo.terminals.db import Terminal
from homeinfo.terminals.filter import TerminalFilter
from homeinfo.terminals.ctrl import RemoteController


def _ls_filter(cid, deployed, testing):
    """Filter terminals of customer for deployed and testing"""
    if deployed is None:
        if testing is None:
            for terminal in Terminal.select().where(
                    (Terminal.customer == cid)):
                yield terminal.tid
        else:
            for terminal in Terminal.select().where(
                    (Terminal.customer == cid) &
                    (Terminal.testing == testing)):
                yield terminal.tid
    else:
        if testing is None:
            for terminal in Terminal.select().where(
                    (Terminal.customer == cid) &
                    (Terminal.deployed == deployed)):
                yield terminal.tid
        else:
            for terminal in Terminal.select().where(
                    (Terminal.customer == cid) &
                    (Terminal.deployed == deployed) &
                    (Terminal.testing == testing)):
                yield terminal.tid


def list_(options):
    """List all terminals of all customers"""
    cid = options['<cid>']
    expr = options['--expr']
    sep = ',' if expr else ' '
    if cid is not None:
        try:
            cid = int(cid)
        except (TypeError, ValueError):
            print('Invalid customer ID: {0}'.format(cid), file=stderr)
            exit(3)
        else:
            deployed = options['--deployed']
            undeployed = options['--undeployed']
            testing = options['--testing']
            productive = options['--productive']
            if deployed:
                depflag = 1
            elif undeployed:
                depflag = 0
            else:
                depflag = None
            if testing:
                testflag = 1
            elif productive:
                testflag = 0
            else:
                testflag = None
            print(sep.join(
                str(tid) for tid in _ls_filter(cid, depflag, testflag)))
    else:
        customers = {}
        for terminal in Terminal:
            try:
                customers[terminal.customer.id]
            except KeyError:
                customers[terminal.customer.id] = []
            if terminal.testing:
                termf = TerminalColor.inverted
            else:
                def termf(x):
                    return x
            if terminal.deployed:
                def termc(x):
                    return TerminalColor.bold(TerminalColor.green(x))
            else:
                termc = TerminalColor.red
            termstr = termf(termc(terminal.tid))
            customers[terminal.customer.id].append(termstr)
        for customer in sorted(customers):
            print('{0}:'.format(customer), ', '.join(customers[customer]))


def chkres(options):
    """Checks terminal screen resolutions"""
    expr = options['<expr>']
    if expr is None:
        terminals = Terminal.select().where(
            (Terminal.deployed == 1) & (Terminal.testing == 0))
    else:
        terminals = TerminalFilter(expr)
    for terminal in terminals:
        ctrl = RemoteController('homeinfo', terminal)
        remote_cmd = 'export DISPLAY=:0 \; xrandr | grep " connected"'
        pr = ctrl.execute(remote_cmd)
        if pr:
            print('Resolution on: ', terminal, '\t',
                  pr.stdout.decode().strip(), sep='')
        else:
            print('Could not determine resolution on: ', terminal,
                  ':\n', pr.stderr.decode().strip(), sep='', file=stderr)


if __name__ == '__main__':
    options = docopt(__doc__)
    if options['chkres']:
        chkres(options)
    if options['list'] or options['ls']:
        list_(options)
