#! /usr/bin/env python3
"""Multi purpose terminal maintenance utility

Maintainer: Richard Neumann <r.neumann@homeinfo.de>

Usage:
    termutil (list | ls) terminals [<expr> [(--deployed | --undeployed)] \
[(--testing | --productive)]]
    termutil (list | ls) (class | os | domains)

Options:
    --deployed    Only print deployed terminals
    --undeployed  Only print undeployed terminals
    --testing     Only print testing terminals
    --productive  Only print productive terminals
"""

from sys import stderr

from docopt import docopt

from homeinfo.lib.strf import Terminal as TerminalColor

from homeinfo.terminals.orm import Class, Domain, OS, Terminal
from homeinfo.terminals.filter import TerminalFilter


def list_terminals(expr, deployed, undeployed, testing, productive):
    """Lists terminal records"""

    template = ('{id: >5.5} {tid: >5.5} {cid: >10.10} {vid: >5.5} '
                '{ipv4addr: >12.12} {deployed: >21.21} {testing: >6.6}  '
                '{address: <50.50} {annotation}')

    def _filter(terminals):
        for terminal in terminals:
            if deployed:
                if undeployed:
                    if testing:
                        if productive:
                            yield terminal
                        else:
                            if terminal.testing:
                                yield terminal
                    else:
                        if productive:
                            if not terminal.testing:
                                yield terminal
                else:
                    if terminal.deployed is not None:
                        if testing:
                            if productive:
                                yield terminal
                            else:
                                if terminal.testing:
                                    yield terminal
                        else:
                            if productive:
                                if not terminal.testing:
                                    yield terminal
            else:
                if terminal.deployed is None:
                    if undeployed:
                        if testing:
                            if productive:
                                yield terminal
                            else:
                                if terminal.testing:
                                    yield terminal
                        else:
                            if productive:
                                if not terminal.testing:
                                    yield terminal

    if expr:
        terminals = TerminalFilter(expr)
    else:
        terminals = Terminal.select().where(True)
    for terminal in _filter(terminals):
        print(template.format(
            id=str(terminal.id),
            tid=str(terminal.tid),
            cid=str(terminal.customer.id),
            vid=str(terminal.vid),
            ipv4addr=str(terminal.ipv4addr),
            deployed=str(terminal.deployed),
            testing=str(terminal.testing),
            address=str(terminal.location),
            annotation=str(terminal.annotation)))


def list_class():
    """Lists available classes"""
    template = ('{id: >5.5}  {name: <10.10}  '
                '{full_name: <10.10}  {touch: <5.5}')
    for cls in Class.select().where(True):
        print(template.format(
            id=str(cls.id),
            name=cls.name,
            full_name=cls.full_name,
            touch=str(cls.touch)))


def list_os():
    """Lists available operating systems"""
    template = '{id: >5.5}  {family: <6.6}  {name: <8.8}  {version}'
    for os in OS.select().where(True):
        print(template.format(
            id=str(os.id),
            family=os.family,
            name=os.name,
            version=os.version))


def list_domains():
    """Lists available domains"""
    template = '{id: >5.5}  {fqdn}'
    for domain in Domain.select().where(True):
        print(template.format(
            id=str(domain.id),
            fqdn=domain.fqdn))


def _ls_filter(cid, deployed, testing):
    """Filter terminals of customer for deployed and testing"""
    if deployed is None:
        if testing is None:
            for terminal in Terminal.select().where(
                    (Terminal.customer == cid)):
                yield terminal.tid
        else:
            for terminal in Terminal.select().where(
                    (Terminal.customer == cid) &
                    (Terminal.testing == testing)):
                yield terminal.tid
    else:
        if testing is None:
            for terminal in Terminal.select().where(
                    (Terminal.customer == cid) &
                    (Terminal.deployed == deployed)):
                yield terminal.tid
        else:
            for terminal in Terminal.select().where(
                    (Terminal.customer == cid) &
                    (Terminal.deployed == deployed) &
                    (Terminal.testing == testing)):
                yield terminal.tid


def list_(options):
    """List all terminals of all customers"""
    cid = options['<cid>']
    if cid is not None:
        try:
            cid = int(cid)
        except (TypeError, ValueError):
            print('Invalid customer ID: {0}'.format(cid), file=stderr)
            exit(3)
        else:
            expr = options['--expr']
            sep = ',' if expr else ' '
            end = cid if expr else ''
            psep = '.' if expr else ''
            if deployed:
                depflag = 1
            elif undeployed:
                depflag = 0
            else:
                depflag = None
            if testing:
                testflag = 1
            elif productive:
                testflag = 0
            else:
                testflag = None
            tids = _ls_filter(cid, depflag, testflag)
            result = sep.join(str(tid) for tid in tids)
            if result:
                print(result, end,  sep=psep)
            else:
                print('')
    else:
        customers = {}
        for terminal in Terminal:
            try:
                customers[terminal.customer.id]
            except KeyError:
                customers[terminal.customer.id] = []
            if terminal.testing:
                termf = TerminalColor.inverted
            else:
                def termf(x):
                    return x
            if terminal.deployed:
                def termc(x):
                    return TerminalColor.bold(TerminalColor.green(x))
            else:
                termc = TerminalColor.red
            termstr = termf(termc(terminal.tid))
            customers[terminal.customer.id].append(termstr)
        for customer in sorted(customers):
            print('{0}:'.format(customer), ', '.join(customers[customer]))


if __name__ == '__main__':
    options = docopt(__doc__)
    if options['list'] or options['ls']:
        expr = options['<expr>']
        terminals = options['terminals']
        if terminals:
            deployed = options['--deployed']
            undeployed = options['--undeployed']
            if not deployed and not undeployed:
                deployed = True
                undeployed = True
            testing = options['--testing']
            productive = options['--productive']
            if not testing and not productive:
                testing = True
                productive = True
            list_terminals(expr, deployed, undeployed, testing, productive)
        elif options['class']:
            list_class()
        elif options['os']:
            list_os()
        elif options['domains']:
            list_domains()
