#! /usr/bin/env python3
"""termutil.

    Terminal database query utility.

Usage:
    termutil (list | ls) [<expression>...] [options]
    termutil find <street> [<house_number>] [options]

Options:
    --terminals, -T                 List terminals.
    --classes, -C                   List terminal classes.
    --oss, -O                       List operating systems.
    --domains, -D                   List domains.
    --deployed, -d                  Only print deployed terminals.
    --undeployed, -u                Only print undeployed terminals.
    --testing, -t                   Only print testing terminals.
    --productive, -p                Only print productive terminals.
    --class=<class>, -c             Only print terminals of the specified \
class.
    --os=<os>, -o                   Only print terminals using the specified \
operating system.
    --online, -u                    Only print terminals that are online.
    --omit-header, -n               Do not print the column header.
    --separator=<separator>, -s     Specifies the column separator.
    --fields=<fields>, -f           Comma-separated list of fields to display.
    --index=<n>, -i                 On ambiguous results, use the nth.
    --annotation=<annotation>, -a   Consider the specified location annotation.
"""
from sys import stderr, exit as exit_

from blessings import Terminal
from docopt import docopt

from terminallib.filter import get_terminals
from terminallib.orm import Class, OS
from terminallib.util import ARNIE, TerminalError, AmbiguousTerminals, \
    print_terminal, get_terminal, list_terminals, list_classes, list_oss, \
    list_domains


def _get_class(name):
    """Returns the class by its name."""

    if name is None:
        return None

    return Class.get(Class.name == name)


def _get_os(name):
    """Returns the operating system by its name."""

    if name is None:
        return None

    return OS.get(OS.name == name)


def _list_terminals(options):
    """Lists terminals."""

    expr = options['<expression>']

    if options['--deployed'] and options['--undeployed']:
        deployed = None
    elif options['--deployed']:
        deployed = True
    elif options['--undeployed']:
        deployed = False
    else:
        deployed = None

    if options['--testing'] and options['--productive']:
        testing = None
    elif options['--testing']:
        testing = True
    elif options['--productive']:
        testing = False
    else:
        testing = None

    try:
        class_ = _get_class(options['--class'])
    except Class.DoesNotExist:
        print('No such class: {}.'.format(options['--class']), file=stderr)
        return 1

    try:
        os = _get_os(options['--os'])
    except OS.DoesNotExist:
        print('No such operating system: {}.'.format(options['--os']),
              file=stderr)
        return 2

    online = options['--online']
    header = not options['--omit-header']
    separator = options['--separator'] or '  '
    fields = options['--fields'] or None

    if fields:
        fields = [field.lower() for field in fields.split(',') if field]

    terminals = get_terminals(
        expr, deployed=deployed, testing=testing, class_=class_, os=os,
        online=online)

    for line in list_terminals(
            terminals, header=header, fields=fields, sep=separator):
        print(line, flush=True)

    return 0


def _list_classes(_):
    """Lists available classes."""

    for class_ in list_classes():
        print(class_, flush=True)


def _list_oss(_):
    """Lists available operating systems."""

    for operating_system in list_oss():
        print(operating_system, flush=True)


def _list_domains(_):
    """Lists available domains."""

    for domain in list_domains():
        print(domain, flush=True)


def _find_terminal(options):
    """Finds a terminal."""

    if options['--index']:
        index = int(options['--index'])
    else:
        index = None

    try:
        terminal = get_terminal(
            options['<street>'], options['<house_number>'],
            options['--annotation'], index=index)
    except AmbiguousTerminals as ambiguous:
        print(Terminal().bold(str(ambiguous)), file=stderr)

        for terminal in ambiguous.terminals:
            print_terminal(terminal)

        return 1
    except TerminalError as error:
        print(error, file=stderr)
        return 2

    print_terminal(terminal)
    return 0


def main(options):
    """Runs the terminal utility."""

    if options['list'] or options['ls']:
        if sum((options['--terminals'], options['--classes'],
                options['--oss'], options['--domains'])) != 1:
            if ''.join(options['<expression>']) == 'CSM-101':
                print(ARNIE)
            else:
                print('Must specify exactly one list option.')
                return 1
        elif options['--terminals']:
            return _list_terminals(options)
        elif options['--classes']:
            _list_classes(options)
        elif options['--os']:
            _list_oss(options)
        elif options['--domains']:
            _list_domains(options)
    elif options['find']:
        return _find_terminal(options)

    return 0


if __name__ == '__main__':
    exit_(main(docopt(__doc__)))
