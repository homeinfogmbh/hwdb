#! /usr/bin/env python3
"""termutil.

    Terminal database query utility.

Usage:
    termutil (list | ls) [<expr>] [options]
    termutil find <street> [<house_number>] [options]

Options:
    --terminals, -T                 List terminals.
    --classes, -C                   List terminal classes.
    --oss, -O                       List operating systems.
    --domains, -D                   List domains.
    --deployed, -d                  Only print deployed terminals.
    --undeployed, -u                Only print undeployed terminals.
    --testing, -t                   Only print testing terminals.
    --productive, -p                Only print productive terminals.
    --class=<class>, -c             Only print terminals of the specified \
class.
    --os=<os>, -o                   Only print terminals using the specified \
operating system.
    --omit-header, -n               Do not print the column header.
    --separator=<separator>, -s     Specifies the column separator.
    --fields=<fields>, -f           Comma-separated list of fields to display.
    --index=<n>, -i                 On ambiguous results, use the nth.
    --annotation=<annotation>, -a   Consider the specified location annotation.
"""
from sys import exit as exit_

from docopt import docopt

from terminallib import TerminalUtil, ClassUtil, OSUtil, DomainUtil
from terminallib.util import ARNIE


def list_terminals(options):
    """Lists terminals."""

    expr = options['<expr>']

    if options['--deployed'] and options['--undeployed']:
        deployed = None
    elif options['--deployed']:
        deployed = True
    elif options['--undeployed']:
        deployed = False
    else:
        deployed = None

    if options['--testing'] and options['--productive']:
        testing = None
    elif options['--testing']:
        testing = True
    elif options['--productive']:
        testing = False
    else:
        testing = None

    class_ = options['--class']
    operating_system = options['--os']
    header = not options['--omit-header']
    separator = options['--separator'] or '  '
    fields = options['--fields'] or None

    if fields:
        fields = [field.lower() for field in fields.split(',') if field]

    utl = TerminalUtil(expr, deployed, testing, class_, operating_system)

    for line in utl.print(header=header, fields=fields, sep=separator):
        print(line, flush=True)


def list_classes(_):
    """Lists available classes."""

    utl = ClassUtil()

    for class_ in utl.print():
        print(class_, flush=True)


def list_os(_):
    """Lists available operating systems."""

    utl = OSUtil()

    for operating_system in utl.print():
        print(operating_system, flush=True)


def list_domains(_):
    """Lists available domains."""

    utl = DomainUtil()

    for domain in utl.print():
        print(domain, flush=True)


def find_terminal(options):
    """Finds a terminal."""

    if options['--index']:
        index = int(options['--index'])
    else:
        index = None

    return TerminalUtil.get(
        options['<street>'],
        options['<house_number>'],
        options['--annotation'],
        index=index)


def main(options):
    """Runs the terminal utility."""

    if options['list'] or options['ls']:
        if sum((options['--terminals'], options['--classes'],
                options['--oss'], options['--domains'])) != 1:
            if options['<expr>'] == 'CSM-101':
                print(ARNIE)
            else:
                print('Must specify exactly one list option.')
                return 1
        elif options['--terminals']:
            list_terminals(options)
        elif options['--classes']:
            list_classes(options)
        elif options['--os']:
            list_os(options)
        elif options['--domains']:
            list_domains(options)
    elif options['find']:
        if not find_terminal(options):
            return 2

    return 0


if __name__ == '__main__':
    exit_(main(docopt(__doc__)))
