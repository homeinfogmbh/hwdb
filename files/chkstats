#! /usr/bin/env python3
"""chkstats.

    Checks statistics for the respective terminal.

Usage:
    chkstats <tid> <cid> [options]

Options:
    --warning=<days>, -w    Warning time period in days [default: 5].
    --critical=<days>, -c   Critical time period in days [default: 9].
"""
from datetime import datetime, timedelta
from sys import stderr, exit as exit_

from peewee import DoesNotExist

from terminallib import Terminal, LatestStats


def parse_options(options):
    """Parses the options."""

    try:
        tid = int(options['<tid>'])
    except ValueError:
        print('Invalid terminal ID: {}.'.format(tid), file=stderr)
        exit_(4)

    try:
        cid = int(options['<cid>'])
    except ValueError:
        print('Invalid customer ID: {}.'.format(tid))
        exit_(5)

    try:
        warning = int(options['--warning'])
    except ValueError:
        print('Invalid amout of warning days: {}.'.format(warning),
              file=stderr)
        exit_(6)
    else:
        warning = timedelta(days=warning)

    try:
        critical = int(options['--critical'])
    except ValueError:
        print('Invalid amout of critical days: {}.'.format(critical),
              file=stderr)
        exit_(7)
    else:
        critical = timedelta(days=critical)

    try:
        terminal = Terminal.by_ids(cid, tid)
    except DoesNotExist:
        print('No such terminal.', file=stderr)
        exit_(8)
    else:
        if terminal.deployed is None:
            print('Terminal is not deployed.', file=stderr)
            exit(9)

    return (terminal, warning, critical)


def main(options):
    """Checks the terminal's stats."""

    terminal, warning, critical = parse_options(options)
    now = datetime.now()

    try:
        latest = LatestStats.get(LatestStats.terminal == terminal)
    except DoesNotExist:
        last = terminal.deployed
        print('Never.')
    else:
        if latest.statistics is None:
            last = terminal.deployed
            print('Never.')
        else:
            last = latest.statistics.timestamp
            print(last)

    if now - last <= warning:
        return 0  # ok
    elif now - last <= critical:
        return 1  # warning

    return 2  # critical


if __name__ == '__main__':
    from docopt import docopt
    exit_(main(docopt(__doc__)))
