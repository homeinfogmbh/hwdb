#! /usr/bin/env python3
#
#  This file is part of the python3 package "homeinfo.terminals"
#
#  (C) 2016: HOMEINFO - Digitale Informationssysteme GmbH
#
#  Maintainer: Richard Neumann <r dot neumann at homeinfo period de>
#
#####################################################################
"""Checks statistics for the respective terminal

Usage:
    chkstats <tid> <cid> [options]

Options:
    --warning=<days>        Warning time period in days [default: 5]
    --critical=<days>       Critical time period in days [default: 9]
"""

from datetime import datetime, timedelta

from peewee import DoesNotExist, Model, PrimaryKeyField, IntegerField, \
    CharField, DateTimeField
from peeweeplus import MySQLDatabase

from homeinfo.terminals.orm import Terminal


class Statistics(Model):
    """Stores application access statistics"""

    class Meta:
        database = MySQLDatabase(
            'application',
            host='localhost',
            user='application',
            passwd='gQWl5rUGdN6v2CNP',
            closing=True)

    id = PrimaryKeyField()
    customer = IntegerField()
    tid = IntegerField(null=True, default=None)
    vid = IntegerField()
    document = CharField(255)
    timestamp = DateTimeField()


if __name__ == '__main__':
    from docopt import docopt

    options = docopt(__doc__)
    tid = options['<tid>']
    cid = options['<cid>']
    warning = options['--warning']
    critical = options['--critical']

    try:
        tid = int(tid)
    except ValueError:
        print('Invalid terminal ID: {}'.format(tid))
        exit(4)

    try:
        cid = int(cid)
    except ValueError:
        print('Invalid customer ID: {}'.format(tid))
        exit(5)

    try:
        warning = int(warning)
    except ValueError:
        print('Invalid amout of warning days: {}'.format(warning))
        exit(6)
    else:
        warning_delta = timedelta(days=warning)

    try:
        critical = int(critical)
    except ValueError:
        print('Invalid amout of critical days: {}'.format(critical))
        exit(7)
    else:
        critical_delta = timedelta(days=critical)

    stats = Statistics.select().where(
        (Statistics.customer == cid) &
        (Statistics.tid == tid))
    now = datetime.now()

    try:
        last = max(s.timestamp for s in stats)
    except ValueError:
        try:
            terminal = Terminal.by_ids(cid, tid)
        except DoesNotExist:
            print('No such terminal.')
            exit(2)
        else:
            if terminal.deployed is None:
                print('Terminal is not deployed.')
                exit(1)
            else:
                last = terminal.deployed
                print('never')
    else:
        print(last)

    if now - last <= warning_delta:
        exit(0)  # ok
    elif now - last <= critical_delta:
        exit(1)  # warning
    else:
        exit(2)  # critical
